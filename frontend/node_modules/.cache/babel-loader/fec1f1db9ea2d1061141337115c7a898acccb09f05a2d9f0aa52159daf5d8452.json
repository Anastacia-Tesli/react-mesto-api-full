{"ast":null,"code":"import _classCallCheck from\"C:/Users/tesli/dev/react-mesto-api-full/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/tesli/dev/react-mesto-api-full/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";var Api=/*#__PURE__*/function(){function Api(object){_classCallCheck(this,Api);this._baseUrl=object.baseUrl;this._headers=object.headers;}_createClass(Api,[{key:\"_makePromise\",value:function _makePromise(url,method,body){return fetch(\"\".concat(this._baseUrl).concat(url),{method:\"\".concat(method),headers:this._headers,body:body}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));});}},{key:\"getUserInfo\",value:function getUserInfo(){return this._makePromise('/users/me','GET');}},{key:\"getInitialCards\",value:function getInitialCards(){return this._makePromise('/cards','GET');}},{key:\"editProfile\",value:function editProfile(data){return this._makePromise('/users/me','PATCH',JSON.stringify({name:\"\".concat(data.name),about:\"\".concat(data.about)}));}},{key:\"editAvatar\",value:function editAvatar(data){return this._makePromise('/users/me/avatar','PATCH',JSON.stringify({avatar:\"\".concat(data.avatar)}));}},{key:\"addCard\",value:function addCard(data){return this._makePromise('/cards','POST',JSON.stringify({name:\"\".concat(data.name),link:\"\".concat(data.link)}));}},{key:\"deleteCard\",value:function deleteCard(id){return this._makePromise('/cards/'+id,'DELETE');}},{key:\"putLike\",value:function putLike(id){return this._makePromise('/cards/'+id+'/likes','PUT');}},{key:\"deleteLike\",value:function deleteLike(id){return this._makePromise('/cards/'+id+'/likes','DELETE');}}]);return Api;}();export{Api as default};export var api=new Api({baseUrl:'http://api.mesto-project.nomoredomains.work',headers:{'Content-Type':'application/json'}});","map":{"version":3,"names":["Api","object","_baseUrl","baseUrl","_headers","headers","url","method","body","fetch","then","res","ok","json","Promise","reject","status","_makePromise","data","JSON","stringify","name","about","avatar","link","id","api"],"sources":["C:/Users/tesli/dev/react-mesto-api-full/frontend/src/utils/api.js"],"sourcesContent":["export default class Api {\r\n  constructor(object) {\r\n    this._baseUrl = object.baseUrl;\r\n    this._headers = object.headers;\r\n  }\r\n  _makePromise(url, method, body) {\r\n    return fetch(`${this._baseUrl}${url}`, {\r\n      method: `${method}`,\r\n      headers: this._headers,\r\n      body: body,\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n  }\r\n  getUserInfo() {\r\n    return this._makePromise('/users/me', 'GET');\r\n  }\r\n  getInitialCards() {\r\n    return this._makePromise('/cards', 'GET');\r\n  }\r\n  editProfile(data) {\r\n    return this._makePromise(\r\n      '/users/me',\r\n      'PATCH',\r\n      JSON.stringify({\r\n        name: `${data.name}`,\r\n        about: `${data.about}`,\r\n      }),\r\n    );\r\n  }\r\n  editAvatar(data) {\r\n    return this._makePromise(\r\n      '/users/me/avatar',\r\n      'PATCH',\r\n      JSON.stringify({\r\n        avatar: `${data.avatar}`,\r\n      }),\r\n    );\r\n  }\r\n  addCard(data) {\r\n    return this._makePromise(\r\n      '/cards',\r\n      'POST',\r\n      JSON.stringify({\r\n        name: `${data.name}`,\r\n        link: `${data.link}`,\r\n      }),\r\n    );\r\n  }\r\n  deleteCard(id) {\r\n    return this._makePromise('/cards/' + id, 'DELETE');\r\n  }\r\n  putLike(id) {\r\n    return this._makePromise('/cards/' + id + '/likes', 'PUT');\r\n  }\r\n  deleteLike(id) {\r\n    return this._makePromise('/cards/' + id + '/likes', 'DELETE');\r\n  }\r\n}\r\n\r\nexport const api = new Api({\r\n  baseUrl: 'http://api.mesto-project.nomoredomains.work',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n"],"mappings":"6QAAqBA,IAAG,yBACtB,aAAYC,MAAM,CAAE,2BAClB,IAAI,CAACC,QAAQ,CAAGD,MAAM,CAACE,OAAO,CAC9B,IAAI,CAACC,QAAQ,CAAGH,MAAM,CAACI,OAAO,CAChC,CAAC,4CACD,sBAAaC,GAAG,CAAEC,MAAM,CAAEC,IAAI,CAAE,CAC9B,MAAOC,MAAK,WAAI,IAAI,CAACP,QAAQ,SAAGI,GAAG,EAAI,CACrCC,MAAM,WAAKA,MAAM,CAAE,CACnBF,OAAO,CAAE,IAAI,CAACD,QAAQ,CACtBI,IAAI,CAAEA,IACR,CAAC,CAAC,CAACE,IAAI,CAAC,SAACC,GAAG,CAAK,CACf,GAAIA,GAAG,CAACC,EAAE,CAAE,CACV,MAAOD,IAAG,CAACE,IAAI,EAAE,CACnB,CACA,MAAOC,QAAO,CAACC,MAAM,iDAAYJ,GAAG,CAACK,MAAM,EAAG,CAChD,CAAC,CAAC,CACJ,CAAC,2BACD,sBAAc,CACZ,MAAO,KAAI,CAACC,YAAY,CAAC,WAAW,CAAE,KAAK,CAAC,CAC9C,CAAC,+BACD,0BAAkB,CAChB,MAAO,KAAI,CAACA,YAAY,CAAC,QAAQ,CAAE,KAAK,CAAC,CAC3C,CAAC,2BACD,qBAAYC,IAAI,CAAE,CAChB,MAAO,KAAI,CAACD,YAAY,CACtB,WAAW,CACX,OAAO,CACPE,IAAI,CAACC,SAAS,CAAC,CACbC,IAAI,WAAKH,IAAI,CAACG,IAAI,CAAE,CACpBC,KAAK,WAAKJ,IAAI,CAACI,KAAK,CACtB,CAAC,CAAC,CACH,CACH,CAAC,0BACD,oBAAWJ,IAAI,CAAE,CACf,MAAO,KAAI,CAACD,YAAY,CACtB,kBAAkB,CAClB,OAAO,CACPE,IAAI,CAACC,SAAS,CAAC,CACbG,MAAM,WAAKL,IAAI,CAACK,MAAM,CACxB,CAAC,CAAC,CACH,CACH,CAAC,uBACD,iBAAQL,IAAI,CAAE,CACZ,MAAO,KAAI,CAACD,YAAY,CACtB,QAAQ,CACR,MAAM,CACNE,IAAI,CAACC,SAAS,CAAC,CACbC,IAAI,WAAKH,IAAI,CAACG,IAAI,CAAE,CACpBG,IAAI,WAAKN,IAAI,CAACM,IAAI,CACpB,CAAC,CAAC,CACH,CACH,CAAC,0BACD,oBAAWC,EAAE,CAAE,CACb,MAAO,KAAI,CAACR,YAAY,CAAC,SAAS,CAAGQ,EAAE,CAAE,QAAQ,CAAC,CACpD,CAAC,uBACD,iBAAQA,EAAE,CAAE,CACV,MAAO,KAAI,CAACR,YAAY,CAAC,SAAS,CAAGQ,EAAE,CAAG,QAAQ,CAAE,KAAK,CAAC,CAC5D,CAAC,0BACD,oBAAWA,EAAE,CAAE,CACb,MAAO,KAAI,CAACR,YAAY,CAAC,SAAS,CAAGQ,EAAE,CAAG,QAAQ,CAAE,QAAQ,CAAC,CAC/D,CAAC,0BA5DkBzB,GAAG,aA+DxB,MAAO,IAAM0B,IAAG,CAAG,GAAI1B,IAAG,CAAC,CACzBG,OAAO,CAAE,6CAA6C,CACtDE,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}